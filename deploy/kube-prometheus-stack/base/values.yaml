global:
  rbac:
    createAggregateClusterRoles: true
kubeProxy:
  enabled: true # kube-proxy less installation
kubeScheduler:
  enabled: false # scraping via pushprox as binded to localhost
kubeControllerManager:
  enabled: false # scraping via pushprox as binded to localhost
kubeEtcd:
  enabled: false # scraping via pushprox as binded to localhost
grafana:
  enabled: true
prometheus:
  ingress:
    enabled: true
    hosts:
    - prometheus.training.cluster.acend.ch
    ingressClassName: haproxy
    paths:
    - /
    pathType: ImplementationSpecific
    tls:
    - hosts:
      - prometheus.training.cluster.acend.ch
      secretName: acend-wildcard
  prometheusSpec:
    resources:
      requests:
        cpu: 200m
        memory: 2600Mi
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelector:
      matchLabels:
        argocd.argoproj.io/instance: monitoring
        prometheus: monitoring
    serviceMonitorNamespaceSelector:
      matchLabels:
        kubernetes.io/metadata.name: monitoring
        prometheus: monitoring
    podMonitorSelector:
      matchLabels:
        argocd.argoproj.io/instance: monitoring
    podMonitorNamespaceSelector:
      matchLabels:
        kubernetes.io/metadata.name: monitoring
    probeSelector:
      matchLabels:
        argocd.argoproj.io/instance: monitoring
    probeNamespaceSelector:
      matchLabels:
        kubernetes.io/metadata.name: monitoring
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
  thanosIngress:
    enabled: true
    hosts:
    - thanos.training.cluster.acend.ch
    ingressClassName: haproxy
    paths:
    - /
    pathType: ImplementationSpecific
    tls:
    - hosts:
      - thanos.training.cluster.acend.ch
      secretName: acend-wildcard
  thanosService:
    enabled: true


prometheusOperator:
  admissionWebhooks:
    certManager:
      enabled: true
  thanosImage:
    registry: quay.io
    repository: thanos/thanos
    version: v0.35.1

alertmanager:
  config:
    route:
      group_by: ['alertname']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
      - receiver: 'null'
        matchers:
          - alertname =~ "InfoInhibitor|Watchdog"
    receivers:
    - name: 'null'
      
  alertmanagerSpec:
    storage: 
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

prometheus-node-exporter:
  resources:
    requests:
      cpu: 10m
      memory: 20Mi

thanosRuler:
  enabled: true
  thanosRulerSpec:
    queryEndpoints: 
    - dnssrv+_grpc._tcp.kube-prometheus-stack-thanos-discovery.monitoring.svc.cluster.local
